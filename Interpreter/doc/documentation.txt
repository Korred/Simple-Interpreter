#################################################
Changes done to simple language after exercise 9:
#################################################

Changes done to LEXER:

- Changed regexp of Numbers (int) to be compatible with floats
- Added regexp and token for Floats
- Added new regexps and tokens for lists and maps/dicts
	- ListOpenBracket
	- ListCloseBracket
	- MapOpenBracket
	- MapCloseBracket
- Added regexp and token for booleans (True|False)


Changes done to AST:

- Added FloatLiteral (1.2, -0.002, +1.337)
	- normalizes cases of -0.0* and +0.0* to 0.0

- Added ListLiteral
	- supports any given elements (list of lists/dicts/string/ints/floats/booleans)
	- even supports lists with mixed element types eg.
		[int,float,string,list,dict,boolean] is a valid list

- Added StringLiteral
- Added KeyValueLiteral (key:value)
	- dictionaries are indexed by keys, which can be the immutable types string and number(int/float)
	- values on the other hand can be choosen from all available types - int/float/string/list/dict/boolean
	- supports dicts with mixed key-value pair types eg.
		- "a":1 (string:int)
		- 4:"a" (int:string)
		- 1:4.3 (int:float)

- Added BoolLiteral (True/False)


Float:
The new 'W\_Float' type follows the previously available 'W\_Integer' definition. It uses all 'W\_Integer' supported arithmetic operations (built-ins) and allows for operations with mixed typed operands eg. it is possible to add an integer and a float without explicit type convertion of operands. Note that the result of arithmetic operations with mixed typed operands will always be of type 'W_Float'. In a scenario where explicit type convertion is needed, we have also included functions that parse integer to float, integer to string, floats to string and vice versa. Additional function for example comparistion operations can be found in the 'Built-ins' section.

Added Built-ins:
"A function that is built into an application and can be accessed by end-users"

Built-ins are either written using Python (see interpreter code - eval_PrimitiveMethodCall) or using already available "Simple" built-in functions and constructs. 

The Examples below, shown for each built-in, can also be found inside the test_doc_examples.py file. 

INTEGER/FLOAT:
	
	The result of arithmetic operations where mixed numeric types are used eg. int and float, will always be of type float.

	- add(x): Add a number x (int/float)
	Example: sum = 5 add(5)

	- sub(x): Substract a number x (int/float)
	Example: dif = 5 sub(5)

	- mul(x): Multiply a number x (int/float)
	Example: prod = 5 mul(5)

	- div(x): Divide a number x (int/float)
	Example: quot = 5 div(5)

	- equals(x): '==' operator (for int/float) - returns True/False
	Example: s = 5 equals(5)

	- less_than(x): '<' operator (for int/float) - returns True/False
	Example: s = 5 less_than(6)

	- less_equal(x): '<=' operator (for int/float) - returns True/False
	Example: s = 5 less_equal(5)

	- greater_than(x): '>' operator (for int/float) - returns True/False
	Example: s = 6 greater_than(5)

	- greater_equal(x): '>=' operator (for int/float) - returns True/False
	Example: s = 5 greater_equal(5)


STRING:
	- len: Returns length of string
	Example: length = '01234' len

	- append(x): Append string x to string (appending a number does not convert number to string implicitly)
	Example: appended = '01234' append('56789')

	- reverse: Returns reversed version of string - keeps original string untouched
	Example: reversed = '0123456789' reverse

	- equals(x): Checks whether two strings are equal - returns boolean (TRUE/FALSE)
	Example: eq = '0123456789' equals('9876543210')

	- substring(x,y): Returns substring starting at x and ending before y
	Example: sub = "substring" substring(0,3)

LIST:
	- add(x): Add element x to (end of) list
	Example:
		l = [1,2,3]
		l add(4)

	- insert(x,y): Insert element y to list at position x - moves existing elements of list one position to the right. If position does not exisit, new element is simply added to the end of the list.
	Example: 
		l = [1,3]
		l insert(1,2)

	- replace(x,y): Replace element at position x with element y. If posiition does not exist, new element is simply added to the end of the list.
	Example:
		l = [1,3]
		l replace(1,2)

	- del(x): Remove element at pos x from list
	Example:
		l = [1]
		l del(0)

	- get(x): Get element at pos x from list
	Example: e = [1,2,3] get(0)


	- len: Get length of list
	Example: length = [1,2,3] len

	- reverse: Returns reversed version of list - keeps original list untouched
	Example: r = [1,2,3] reverse

	- oreverse: Returns reversed version of list - original list is modified
	Example: r = [1,2,3] oreverse

	- extend(x): Extends list by adding elements from x to left side (basically merge of two lists)
	Example: l = [1,2,3] extend([4,5,6])

	- clear: Clears list/Removes all stored elements
	Example:
		l = [1,2,3]
		l clear

DICT:
	- add(x,y): Adds the key-value pair x:y to dictionary - replaces existing entry if keys are identical
	Example:
	d = {}
	d add(1,"first")

	- del(x): Removes dictionary entry with key x
	Example:
	d = {1:2,"3":4.0}
	d del(1)
	d del("3")

	- get(x): Returns value for dictionary entry with key x
	Example: 
	d = {1:"a"}
	e = d get(1)

	- get_keys: Returns all keys stored in dicitionary as list
	Example:
	d = {1:2,2:3,3:4}
	keys = d getkeys

	- contains(x):
	Example:

	- len(x):
	Example:

BOOLEAN:
	- not:
	- and(x):
	- or(x):
	- nand(x):
	- nor(x):
	- xor(x):
	- xnor(x):

MIXED:

	- to_int(x): Convert given float or string (if possible) to int
	Example: i = to_int(2.5)

	- to_float(x): Convert given int or string (if possible) to float
	Example: f = to_float("2.5")

	- to_str(x): Convert given int or float to string
	Example: s = to_str(1.337)

	- ceil(x): Returns the ceiling of x, the smallest integer greater than or equal to x.
	Example: ce = ceil(2.6)

	- floor(x): Returns the floor of x, the largest integer less than or equal to x.
	Example: fl = floor(2.6)

	- s_range(x): Simple range - returns a list where first element is 0 and last element is x
	Example: l = s_range(5)

	- e_range(x,y): Extended range - returns a list where first element is x and last element is y
	Example: l = e_range(5,10)

	- fibonacci(x): Returns the x-th number from the Fibonacci sequence
	Example: fib = fibonacci(8)
